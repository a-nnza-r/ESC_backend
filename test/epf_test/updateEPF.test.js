import {createEPF,getEPF,updateEPF} from "../../models/epf_db.js";
import {createUser} from "../../models/user_db.js";
import {createPool, deleteFromUsers, deleteFromEPFs} from "./epf_test_utils.js";

import path from "path";
import fs from "fs";

let pool;

describe("updateEPF", () => {
    beforeAll(async () => {
        pool = createPool();
        await deleteFromUsers(pool);
        await createUser("1", "name 1", "name_1@mymail.sutd.edu.sg", "exco", pool);
      });


    beforeEach(async() => {
        await deleteFromEPFs(pool);
        
        const jsonFilePath = path.join(__dirname, 'createEPF_testjson', 'createEPF_test1.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        const {
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await createEPF(
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )

    })


    test("Test ID: 1 - Valid input: Update existing EPF with valid fields", async()=>{
        
        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test1.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          const updatedEPF = await updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )

          let matches = true;
          for(let key in data) {
            if(String(data[key])!==String(updatedEPF[key])) {
              matches = false;
              break;
            }
          }
          
          expect(matches).toBeTruthy();
        })





    test("Test ID: 2 - Non-existent EPF ID", async()=>{
    
        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test2.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
            } = data;

            await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
            )).rejects.toThrow("Non-existent epf");
        })


    test("Test ID: 3 - Non-existent EXCO User ID", async()=>{

        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test3.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
            } = data;

            await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
            )).rejects.toThrow("Non-existent exco user id");
        })


      test("Test ID: 4 - Missing Event Name", async()=>{
    
        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test4.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )).rejects.toThrow("Event name missing");
        })


      test("Test ID: 5 - Invalid INT datatype", async()=>{
  
        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test5.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )).rejects.toThrow("Unexpected data type");
        })





      test("Test ID: 6 - Invalid Object datatype", async()=>{

        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test6.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )).rejects.toThrow("Unexpected data type");
        })





      test("Test ID: 7 - Invalid Decimal datatype", async()=>{

        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test7.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )).rejects.toThrow("Unexpected data type");
        })





      test("Test ID: 8 - Invalid String datatype", async()=>{

        const jsonFilePath = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test8.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        
        const {
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await expect(updateEPF(
            epf_id,
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )).rejects.toThrow("Unexpected data type");
        })





      test("Test ID: 9 - Update multiple EPFs with valid fields concurrently", async()=>{

        
        
        const jsonFilePath = path.join(__dirname, 'createEPF_testjson', 'createEPF_test1.json');
        const jsonData = fs.readFileSync(jsonFilePath, 'utf-8');
        const data = JSON.parse(jsonData);
        const {
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root
          } = data;

          await createEPF(
            status,
            exco_user_id,
            a_name,
            a_student_id,
            a_organisation,
            a_contact_number,
            a_email,
            a_comments_osl,
            a_comments_root,
            b_event_name,
            b_target_audience,
            b_event_schedule,
            b_expected_turnout,
            b_event_objective,
            b_comments_osl,
            b_comments_root,
            c1_date,
            c1_time,
            c1_activity_and_description,
            c1_venue,
            c2_date,
            c2_time,
            c2_activity_and_description,
            c2_venue,
            c3_date,
            c3_time,
            c3_activity_and_description,
            c3_venue,
            c3_cleanup_date,
            c3_cleanup_time,
            c3_cleanup_activity_and_description,
            c3_cleanup_venue,
            c_comments_osl,
            c_comments_root,
            d1a_club_income_fund,
            d1a_osl_seed_fund,
            d1a_donation,
            d1b_revenue,
            d1b_donation_or_scholarship,
            d1b_total_source_of_funds,
            d11_items_goods_services,
            d11_price,
            d11_quantity,
            d11_amount,
            d11_total_revenue,
            d2_items,
            d2_reason_for_purchase,
            d2_venue,
            d2_total_expenditure,
            d_comments_osl,
            d_comments_root,
            e_personal_data,
            e_comments_osl,
            e_comments_root,
            f_name,
            f_student_id,
            f_position,
            f_comments_osl,
            f_comments_root,
            g_1_1,
            g_1_2,
            g_1_3,
            g_2_1,
            g_2_2,
            g_2_3,
            g_3_1,
            g_3_2,
            g_3_3,
            g_4_1,
            g_4_2,
            g_4_3,
            g_5_1,
            g_5_2,
            g_5_3,
            g_6_1,
            g_6_2,
            g_6_3,
            g_7_1,
            g_7_2,
            g_7_3,
            g_comments_osl,
            g_comments_root,
            pool
          )

        const jsonFilePath_1 = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test9_1.json');
        const jsonData_1 = fs.readFileSync(jsonFilePath_1, 'utf-8');
        const data_1 = JSON.parse(jsonData_1);

        const jsonFilePath_2 = path.join(__dirname, 'updateEPF_testjson', 'updateEPF_test9_2.json');
        const jsonData_2 = fs.readFileSync(jsonFilePath_2, 'utf-8');
        const data_2 = JSON.parse(jsonData_2);
        
        const {
          epf_id_1,
          status_1,
          exco_user_id_1,
          a_name_1,
          a_student_id_1,
          a_organisation_1,
          a_contact_number_1,
          a_email_1,
          a_comments_osl_1,
          a_comments_root_1,
          b_event_name_1,
          b_target_audience_1,
          b_event_schedule_1,
          b_expected_turnout_1,
          b_event_objective_1,
          b_comments_osl_1,
          b_comments_root_1,
          c1_date_1,
          c1_time_1,
          c1_activity_and_description_1,
          c1_venue_1,
          c2_date_1,
          c2_time_1,
          c2_activity_and_description_1,
          c2_venue_1,
          c3_date_1,
          c3_time_1,
          c3_activity_and_description_1,
          c3_venue_1,
          c3_cleanup_date_1,
          c3_cleanup_time_1,
          c3_cleanup_activity_and_description_1,
          c3_cleanup_venue_1,
          c_comments_osl_1,
          c_comments_root_1,
          d1a_club_income_fund_1,
          d1a_osl_seed_fund_1,
          d1a_donation_1,
          d1b_revenue_1,
          d1b_donation_or_scholarship_1,
          d1b_total_source_of_funds_1,
          d11_items_goods_services_1,
          d11_price_1,
          d11_quantity_1,
          d11_amount_1,
          d11_total_revenue_1,
          d2_items_1,
          d2_reason_for_purchase_1,
          d2_venue_1,
          d2_total_expenditure_1,
          d_comments_osl_1,
          d_comments_root_1,
          e_personal_data_1,
          e_comments_osl_1,
          e_comments_root_1,
          f_name_1,
          f_student_id_1,
          f_position_1,
          f_comments_osl_1,
          f_comments_root_1,
          g_1_1_1,
          g_1_2_1,
          g_1_3_1,
          g_2_1_1,
          g_2_2_1,
          g_2_3_1,
          g_3_1_1,
          g_3_2_1,
          g_3_3_1,
          g_4_1_1,
          g_4_2_1,
          g_4_3_1,
          g_5_1_1,
          g_5_2_1,
          g_5_3_1,
          g_6_1_1,
          g_6_2_1,
          g_6_3_1,
          g_7_1_1,
          g_7_2_1,
          g_7_3_1,
          g_comments_osl_1,
          g_comments_root_1
          } = data_1;


          const {
            epf_id_2,
            status_2,
            exco_user_id_2,
            a_name_2,
            a_student_id_2,
            a_organisation_2,
            a_contact_number_2,
            a_email_2,
            a_comments_osl_2,
            a_comments_root_2,
            b_event_name_2,
            b_target_audience_2,
            b_event_schedule_2,
            b_expected_turnout_2,
            b_event_objective_2,
            b_comments_osl_2,
            b_comments_root_2,
            c1_date_2,
            c1_time_2,
            c1_activity_and_description_2,
            c1_venue_2,
            c2_date_2,
            c2_time_2,
            c2_activity_and_description_2,
            c2_venue_2,
            c3_date_2,
            c3_time_2,
            c3_activity_and_description_2,
            c3_venue_2,
            c3_cleanup_date_2,
            c3_cleanup_time_2,
            c3_cleanup_activity_and_description_2,
            c3_cleanup_venue_2,
            c_comments_osl_2,
            c_comments_root_2,
            d1a_club_income_fund_2,
            d1a_osl_seed_fund_2,
            d1a_donation_2,
            d1b_revenue_2,
            d1b_donation_or_scholarship_2,
            d1b_total_source_of_funds_2,
            d11_items_goods_services_2,
            d11_price_2,
            d11_quantity_2,
            d11_amount_2,
            d11_total_revenue_2,
            d2_items_2,
            d2_reason_for_purchase_2,
            d2_venue_2,
            d2_total_expenditure_2,
            d_comments_osl_2,
            d_comments_root_2,
            e_personal_data_2,
            e_comments_osl_2,
            e_comments_root_2,
            f_name_2,
            f_student_id_2,
            f_position_2,
            f_comments_osl_2,
            f_comments_root_2,
            g_1_1_2,
            g_1_2_2,
            g_1_3_2,
            g_2_1_2,
            g_2_2_2,
            g_2_3_2,
            g_3_1_2,
            g_3_2_2,
            g_3_3_2,
            g_4_1_2,
            g_4_2_2,
            g_4_3_2,
            g_5_1_2,
            g_5_2_2,
            g_5_3_2,
            g_6_1_2,
            g_6_2_2,
            g_6_3_2,
            g_7_1_2,
            g_7_2_2,
            g_7_3_2,
            g_comments_osl_2,
            g_comments_root_2
          } = data_2;

          const updatedEPFs = await Promise.all([
          updateEPF(
            epf_id_1,
            status_1,
            exco_user_id_1,
            a_name_1,
            a_student_id_1,
            a_organisation_1,
            a_contact_number_1,
            a_email_1,
            a_comments_osl_1,
            a_comments_root_1,
            b_event_name_1,
            b_target_audience_1,
            b_event_schedule_1,
            b_expected_turnout_1,
            b_event_objective_1,
            b_comments_osl_1,
            b_comments_root_1,
            c1_date_1,
            c1_time_1,
            c1_activity_and_description_1,
            c1_venue_1,
            c2_date_1,
            c2_time_1,
            c2_activity_and_description_1,
            c2_venue_1,
            c3_date_1,
            c3_time_1,
            c3_activity_and_description_1,
            c3_venue_1,
            c3_cleanup_date_1,
            c3_cleanup_time_1,
            c3_cleanup_activity_and_description_1,
            c3_cleanup_venue_1,
            c_comments_osl_1,
            c_comments_root_1,
            d1a_club_income_fund_1,
            d1a_osl_seed_fund_1,
            d1a_donation_1,
            d1b_revenue_1,
            d1b_donation_or_scholarship_1,
            d1b_total_source_of_funds_1,
            d11_items_goods_services_1,
            d11_price_1,
            d11_quantity_1,
            d11_amount_1,
            d11_total_revenue_1,
            d2_items_1,
            d2_reason_for_purchase_1,
            d2_venue_1,
            d2_total_expenditure_1,
            d_comments_osl_1,
            d_comments_root_1,
            e_personal_data_1,
            e_comments_osl_1,
            e_comments_root_1,
            f_name_1,
            f_student_id_1,
            f_position_1,
            f_comments_osl_1,
            f_comments_root_1,
            g_1_1_1,
            g_1_2_1,
            g_1_3_1,
            g_2_1_1,
            g_2_2_1,
            g_2_3_1,
            g_3_1_1,
            g_3_2_1,
            g_3_3_1,
            g_4_1_1,
            g_4_2_1,
            g_4_3_1,
            g_5_1_1,
            g_5_2_1,
            g_5_3_1,
            g_6_1_1,
            g_6_2_1,
            g_6_3_1,
            g_7_1_1,
            g_7_2_1,
            g_7_3_1,
            g_comments_osl_1,
            g_comments_root_1,
            pool
          ),

          updateEPF(
            epf_id_2,
            status_2,
            exco_user_id_2,
            a_name_2,
            a_student_id_2,
            a_organisation_2,
            a_contact_number_2,
            a_email_2,
            a_comments_osl_2,
            a_comments_root_2,
            b_event_name_2,
            b_target_audience_2,
            b_event_schedule_2,
            b_expected_turnout_2,
            b_event_objective_2,
            b_comments_osl_2,
            b_comments_root_2,
            c1_date_2,
            c1_time_2,
            c1_activity_and_description_2,
            c1_venue_2,
            c2_date_2,
            c2_time_2,
            c2_activity_and_description_2,
            c2_venue_2,
            c3_date_2,
            c3_time_2,
            c3_activity_and_description_2,
            c3_venue_2,
            c3_cleanup_date_2,
            c3_cleanup_time_2,
            c3_cleanup_activity_and_description_2,
            c3_cleanup_venue_2,
            c_comments_osl_2,
            c_comments_root_2,
            d1a_club_income_fund_2,
            d1a_osl_seed_fund_2,
            d1a_donation_2,
            d1b_revenue_2,
            d1b_donation_or_scholarship_2,
            d1b_total_source_of_funds_2,
            d11_items_goods_services_2,
            d11_price_2,
            d11_quantity_2,
            d11_amount_2,
            d11_total_revenue_2,
            d2_items_2,
            d2_reason_for_purchase_2,
            d2_venue_2,
            d2_total_expenditure_2,
            d_comments_osl_2,
            d_comments_root_2,
            e_personal_data_2,
            e_comments_osl_2,
            e_comments_root_2,
            f_name_2,
            f_student_id_2,
            f_position_2,
            f_comments_osl_2,
            f_comments_root_2,
            g_1_1_2,
            g_1_2_2,
            g_1_3_2,
            g_2_1_2,
            g_2_2_2,
            g_2_3_2,
            g_3_1_2,
            g_3_2_2,
            g_3_3_2,
            g_4_1_2,
            g_4_2_2,
            g_4_3_2,
            g_5_1_2,
            g_5_2_2,
            g_5_3_2,
            g_6_1_2,
            g_6_2_2,
            g_6_3_2,
            g_7_1_2,
            g_7_2_2,
            g_7_3_2,
            g_comments_osl_2,
            g_comments_root_2,
            pool
          )
          ])

        const result_records = await pool.query('SELECT COUNT(*) FROM EPFS;');
        const recordCount = result_records.rows[0].count;
        expect(recordCount).toBe("2");




        if(updatedEPFs[0]["epf_id"]=="1") {
          let matches_1 = true;
          for(let key in data_1) {
            const originalKey = key.replace(/_1$/, ""); 
            if(String(data_1[key])!==String(updatedEPFs[0][originalKey])) {
              matches_1 = false;
              break;
            }
          }
          expect(updatedEPFs[0]).toHaveProperty("epf_id");
          expect(matches_1).toBeTruthy();

          let matches_2 = true;
          for(let key in data_2) {
            const originalKey = key.replace(/_2$/, "");
            if(String(data_2[key])!==String(updatedEPFs[1][originalKey])) {
              matches_2 = false;
              break;
            }
          }
          expect(updatedEPFs[1]).toHaveProperty("epf_id");
          expect(matches_2).toBeTruthy();
          } else {

            let matches_1 = true;
            for(let key in data_1) {
              const originalKey = key.replace(/_1$/, ""); 
              if(String(data_1[key])!==String(updatedEPFs[1][originalKey])) {
                matches_1 = false;
                break;
              }
            }
            expect(updatedEPFs[1]).toHaveProperty("epf_id");
            expect(matches_1).toBeTruthy();

            let matches_2 = true;
            for(let key in data_2) {
              const originalKey = key.replace(/_2$/, ""); 
              if(String(data_2[key])!==String(updatedEPFs[0][originalKey])) {
                matches_2 = false;
                break;
              }
            }
            expect(updatedEPFs[0]).toHaveProperty("epf_id");
            expect(matches_2).toBeTruthy();
          }
        })
    

    afterAll(async()=>{
        await pool.end();
    })
    
}) 